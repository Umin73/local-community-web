name: Frontend Auto Deploy to S3

on:
  push:
    branches:
      - feat/deploy/#80

jobs:
  Deploy_Frontend_to_S3:
    runs-on: ubuntu-latest

    steps:
      - name: EC2 서버에 SSH 원격 접속 후 프론트엔드 배포 작업 수행
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # CloudFront Distribution ID 설정
            CLOUDFRONT_DISTRIBUTION_ID="E29K7L3RIQ0H87"
            echo "Using CLOUDFRONT_DISTRIBUTION_ID: $CLOUDFRONT_DISTRIBUTION_ID"

            # 작업 디렉토리로 이동
            cd /home/ubuntu/local-community-web/frontend

            # 브랜치 상태 확인 및 필요시 fetch/reset 실행
            if [ "$(git rev-parse --abbrev-ref HEAD)" != "feat/deploy/#80" ]; then
              git fetch origin feat/deploy/#80:feat/deploy/#80 || echo "Branch fetch failed"
              git checkout feat/deploy/#80 || git checkout -b feat/deploy/#80 origin/feat/deploy/#80
              git reset --hard origin/feat/deploy/#80 || echo "Reset failed"
            fi

            # REACT_APP_API_URL 환경 변수 설정
            echo "REACT_APP_API_URL=https://api.townin.site/api" > .env.production
            echo "Using .env.production with REACT_APP_API_URL=https://api.townin.site/api"

            # 의존성 설치
            npm install || echo "npm install failed"

            # 최신 caniuse-lite 업데이트
            npx update-browserslist-db@latest || echo "Browserslist update failed"

            # babel-preset-react-app 관련 의존성 추가
            npm install --save-dev @babel/plugin-transform-private-property-in-object || echo "Babel plugin installation failed"

            # 프로젝트 빌드
            npm run build || echo "npm run build failed"

            # S3 동기화
            aws s3 sync build/ s3://town-in-web-page --region ap-northeast-2 --delete || echo "S3 sync failed"

            # CloudFront 캐시 무효화
            echo "Starting CloudFront invalidation..."
            INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*" --query "Invalidation.Id" --output text)

            if [[ -z "$INVALIDATION_ID" ]]; then
              echo "Error: Failed to create CloudFront invalidation. Please check your AWS settings."
              exit 1
            fi

            echo "Invalidation ID: $INVALIDATION_ID"

            # 캐시 무효화 상태 확인
            while true; do
              STATUS=$(aws cloudfront get-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --id $INVALIDATION_ID --query "Invalidation.Status" --output text)
              echo "Current Invalidation Status: $STATUS"
              if [ "$STATUS" == "Completed" ]; then
                echo "Cache invalidation completed."
                break
              fi
              sleep 10
            done

            # 배포 완료 메시지 출력
            echo "Frontend has been successfully deployed from feat/deploy/#80 branch."
